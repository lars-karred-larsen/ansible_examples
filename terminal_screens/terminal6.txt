[student@master ansible_examples]$ ansible-navigator doc -l -m stdout
[WARNING]: Collection redhatinsights.insights does not support Ansible version 2.15.4
ansible.builtin.add_host                                Add a host (and alternatively a group) to the ansible-playbook in-memory inventory               
ansible.builtin.apt                                     Manages apt-packages                                                                             
ansible.builtin.apt_key                                 Add or remove an apt key                                                                         
ansible.builtin.apt_repository                          Add and remove APT repositories                                                                  
ansible.builtin.assemble                                Assemble configuration files from fragments                                                      
ansible.builtin.assert                                  Asserts given expressions are true                                                               
ansible.builtin.async_status                            Obtain status of asynchronous task                                                               
ansible.builtin.blockinfile                             Insert/update/remove a text block surrounded by marker lines                                     
ansible.builtin.command                                 Execute commands on targets                                                                      
ansible.builtin.copy                                    Copy files to remote locations                                                                   
ansible.builtin.cron                                    Manage cron.d and crontab entries                                                                
ansible.builtin.deb822_repository                       Add and remove deb822 formatted repositories                                                     
ansible.builtin.debconf                                 Configure a .deb package                                                                         
ansible.builtin.debug                                   Print statements during execution                                                                
ansible.builtin.dnf                                     Manages packages with the `dnf' package manager                                                  
ansible.builtin.dnf5                                    Manages packages with the `dnf5' package manager                                                 
ansible.builtin.dpkg_selections                         Dpkg package selection selections                                                                
ansible.builtin.expect                                  Executes a command and responds to prompts                                                       
ansible.builtin.fail                                    Fail with custom message                                                                         
ansible.builtin.fetch                                   Fetch files from remote nodes                                                                    
ansible.builtin.file                                    Manage files and file properties                                                                 
ansible.builtin.find                                    Return a list of files based on specific criteria                                                
ansible.builtin.gather_facts                            Gathers facts about remote hosts                                                                 
ansible.builtin.get_url                                 Downloads files from HTTP, HTTPS, or FTP to node                                                 
ansible.builtin.getent                                  A wrapper to the unix getent utility                                                             
ansible.builtin.git                                     Deploy software (or files) from git checkouts                                                    
ansible.builtin.group                                   Add or remove groups                                                                             
ansible.builtin.group_by                                Create Ansible groups based on facts                                                             
[student@master ansible_examples]$ ansible-navigator doc dnf -m stdout
> ANSIBLE.BUILTIN.DNF    (/usr/local/lib/python3.11/site-packages/ansible/modules/dnf.py)

        Installs, upgrade, removes, and lists packages and groups with the `dnf' package manager.

ADDED IN: version 1.9 of ansible-core

  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- allow_downgrade
        Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that
        package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could
        end up with a set of packages that does not match the complete list of specified packages to install (because
        dependencies between the downgraded package and others can cause changes to the packages which were in the earlier
        transaction).
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- allowerasing
        If `true' it allows  erasing  of  installed  packages to resolve dependencies.
        default: 'no'
        type: bool
        added in: version 2.10 of ansible-core

[student@master ansible_examples]$ ansible-navigator doc ansible.builtin.dnf -m stdout
> ANSIBLE.BUILTIN.DNF    (/usr/local/lib/python3.11/site-packages/ansible/modules/dnf.py)

        Installs, upgrade, removes, and lists packages and groups with the `dnf' package manager.

ADDED IN: version 1.9 of ansible-core

  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- allow_downgrade
        Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that
        package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could
        end up with a set of packages that does not match the complete list of specified packages to install (because
        dependencies between the downgraded package and others can cause changes to the packages which were in the earlier
        transaction).
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- allowerasing
        If `true' it allows  erasing  of  installed  packages to resolve dependencies.
        default: 'no'
        type: bool
        added in: version 2.10 of ansible-core

[student@master ansible_examples]$ ansible-navigator doc ansible.builtin.dnf -m stdout
> ANSIBLE.BUILTIN.DNF    (/usr/local/lib/python3.11/site-packages/ansible/modules/dnf.py)

        Installs, upgrade, removes, and lists packages and groups with the `dnf' package manager.

ADDED IN: version 1.9 of ansible-core

  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- allow_downgrade
        Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that
        package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could
        end up with a set of packages that does not match the complete list of specified packages to install (because
        dependencies between the downgraded package and others can cause changes to the packages which were in the earlier
        transaction).
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- allowerasing
        If `true' it allows  erasing  of  installed  packages to resolve dependencies.
        default: 'no'
        type: bool
        added in: version 2.10 of ansible-core


- autoremove
        If `true', removes all "leaf" packages from the system that were originally installed as dependencies of user-
        installed packages but which are no longer required by any such package. Should be used alone or when state is
        `absent'
        default: 'no'
        type: bool
        added in: version 2.4 of ansible-core


- bugfix
        If set to `true', and `state=latest' then only installs updates that have been marked bugfix related.
        Note that, similar to `dnf upgrade-minimal', this filter applies to dependencies as well.
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- cacheonly
        Tells dnf to run entirely from system cache; does not download or update metadata.
        default: 'no'
        type: bool
        added in: version 2.12 of ansible-core


- conf_file
        The remote dnf configuration file to use for the transaction.
        default: null
        type: str

- disable_excludes
        Disable the excludes defined in DNF config files.
        If set to `all', disables all excludes.
        If set to `main', disable excludes defined in [main] in dnf.conf.
        If set to `repoid', disable excludes defined for given repo id.
        default: null
        type: str
        added in: version 2.7 of ansible-core


- disable_gpg_check
        Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is
        `present' or `latest'.
        This setting affects packages installed from a repository as well as "local" packages installed from the filesystem or
        a URL.
        default: 'no'
        type: bool

- disable_plugin
        `Plugin' name to disable for the install/update operation. The disabled plugins will not persist beyond the
        transaction.
        default: []
        elements: str
        type: list
        added in: version 2.7 of ansible-core


- disablerepo
        `Repoid' of repositories to disable for the install/update operation. These repos will not persist beyond the
        transaction. When specifying multiple repos, separate them with a ",".
        default: []
        elements: str
        type: list

- download_dir
        Specifies an alternate directory to store packages.
        Has an effect only if `download_only' is specified.
        default: null
        type: str
        added in: version 2.8 of ansible-core


- download_only
        Only download the packages, do not install them.
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- enable_plugin
        `Plugin' name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction.
        default: []
        elements: str
        type: list
        added in: version 2.7 of ansible-core


- enablerepo
        `Repoid' of repositories to enable for the install/update operation. These repos will not persist beyond the
        transaction. When specifying multiple repos, separate them with a ",".
        default: []
        elements: str
        type: list

- exclude
        Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string.
        default: []
        elements: str
        type: list
        added in: version 2.7 of ansible-core


- install_repoquery
        This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature
        parity/compatibility with the `yum' module.
        default: 'yes'
        type: bool
        added in: version 2.7 of ansible-core


- install_weak_deps
        Will also install all packages linked by a weak dependency relation.
        default: 'yes'
        type: bool
        added in: version 2.8 of ansible-core


- installroot
        Specifies an alternative installroot, relative to which all packages will be installed.
        default: /
        type: str
        added in: version 2.3 of ansible-core


- list
        Various (non-idempotent) commands for usage with `/usr/bin/ansible' and `not' playbooks. Use
        [ansible.builtin.package_facts] instead of the `list' argument as a best practice.
        default: null
        type: str

- lock_timeout
        Amount of time to wait for the dnf lockfile to be freed.
        default: 30
        type: int
        added in: version 2.8 of ansible-core


- name
        A package name or package specifier with version, like `name-1.0'. When using state=latest, this can be '*' which
        means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this
        can accept a comma separated string of packages or a list of packages.
        Comparison operators for package version are valid here `>', `<', `>=', `<='. Example - `name >= 1.0'. Spaces around
        the operator are required.
        You can also pass an absolute path for a binary which is provided by the package to install. See examples for more
        information.
        aliases: [pkg]
        default: []
        elements: str
        type: list

- nobest
        Set best option to False, so that transactions are not limited to best candidates only.
        default: 'no'
        type: bool
        added in: version 2.11 of ansible-core


- releasever
        Specifies an alternative release from which all packages will be installed.
        default: null
        type: str
        added in: version 2.6 of ansible-core


- security
        If set to `true', and `state=latest' then only installs updates that have been marked security related.
        Note that, similar to `dnf upgrade-minimal', this filter applies to dependencies as well.
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- skip_broken
        Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the
        --skip-broken option.
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- sslverify
        Disables SSL validation of the repository server for this transaction.
        This should be set to `false' if one of the configured repositories is using an untrusted or self-signed certificate.
        default: 'yes'
        type: bool
        added in: version 2.13 of ansible-core


- state
        Whether to install (`present', `latest'), or remove (`absent') a package.
        Default is `None', however in effect the default action is `present' unless the `autoremove' option is enabled for
        this module, then `absent' is inferred.
        choices: [absent, present, installed, removed, latest]
        default: null
        type: str

- update_cache
        Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is `present' or
        `latest'.
        aliases: [expire-cache]
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- update_only
        When using latest, only update installed packages. Do not install packages.
        Has an effect only if state is `latest'
        default: 'no'
        type: bool
        added in: version 2.7 of ansible-core


- use_backend
        By default, this module will select the backend based on the `ansible_pkg_mgr' fact.
        choices: [auto, dnf4, dnf5]
        default: auto
        type: str
        added in: version 2.15 of ansible-core


- validate_certs
        This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to `false', the SSL
        certificates will not be validated.
        This should only set to `false' used on personally controlled sites using self-signed certificates as it avoids
        verifying the source site.
        default: 'yes'
        type: bool
        added in: version 2.7 of ansible-core



ATTRIBUTES:

        action:
          description: Indicates this has a corresponding action plugin so some parts of the
            options can be executed on the controller
          details: In the case of dnf, it has 2 action plugins that use it under the hood,
            [ansible.builtin.yum] and [ansible.builtin.package].
          support: partial
        async:
          description: Supports being used with the `async' keyword
          support: none
...skipping...
EXAMPLES:

- name: Install the latest version of Apache
  ansible.builtin.dnf:
    name: httpd
    state: latest

- name: Install Apache >= 2.4
  ansible.builtin.dnf:
          support: full
        platform:
          description: Target OS/families that can be operated against
          platforms: rhel
          support: N/A

NOTES:
      * When used with a `loop:' each package will be processed individually, it is much more efficient to pass the list
        directly to the `name' option.
      * Group removal doesn't work if the group was installed with Ansible because upstream dnf's API doesn't properly
        mark groups as installed, therefore upon removal the module is unable to detect that the group is installed
        (https://bugzilla.redhat.com/show_bug.cgi?id=1620324)


REQUIREMENTS:  python >= 2.6, python-dnf, for the autoremove option you need dnf >= 2.0.1"

AUTHOR: Igor Gnatenko (@ignatenkobrain) <i.gnatenko.brain@gmail.com>, Cristian van Ee (@DJMuggs) <cristian at cvee.org>, Berend De Schouwer (@berenddeschouwe>

EXAMPLES:

- name: Install the latest version of Apache
  ansible.builtin.dnf:
    name: httpd
    state: latest

- name: Install Apache >= 2.4
  ansible.builtin.dnf:
    name: httpd >= 2.4
    state: present

- name: Install the latest version of Apache and MariaDB
  ansible.builtin.dnf:
    name:
      - httpd
      - mariadb-server
    state: latest

- name: Remove the Apache package
  ansible.builtin.dnf:
    name: httpd
[student@master ansible_examples]$ ansible-navigator doc -l -m stdout
[WARNING]: Collection redhatinsights.insights does not support Ansible version 2.15.4
ansible.builtin.add_host                                Add a host (and alternatively a group) to the ansible-playbook in-memory inventory               
ansible.builtin.apt                                     Manages apt-packages                                                                             
ansible.builtin.apt_key                                 Add or remove an apt key                                                                         
ansible.builtin.apt_repository                          Add and remove APT repositories                                                                  
ansible.builtin.assemble                                Assemble configuration files from fragments                                                      
ansible.builtin.assert                                  Asserts given expressions are true                                                               
ansible.builtin.async_status                            Obtain status of asynchronous task                                                               
ansible.builtin.blockinfile                             Insert/update/remove a text block surrounded by marker lines                                     
ansible.builtin.command                                 Execute commands on targets                                                                      
ansible.builtin.copy                                    Copy files to remote locations                                                                   
ansible.builtin.cron                                    Manage cron.d and crontab entries                                                                
ansible.builtin.deb822_repository                       Add and remove deb822 formatted repositories                                                     
ansible.builtin.debconf                                 Configure a .deb package                                                                         
ansible.builtin.debug                                   Print statements during execution                                                                
ansible.builtin.dnf                                     Manages packages with the `dnf' package manager                                                  
ansible.builtin.dnf5                                    Manages packages with the `dnf5' package manager                                                 
ansible.builtin.dpkg_selections                         Dpkg package selection selections                                                                
ansible.builtin.expect                                  Executes a command and responds to prompts                                                       
ansible.builtin.fail                                    Fail with custom message                                                                         
ansible.builtin.fetch                                   Fetch files from remote nodes                                                                    
ansible.builtin.file                                    Manage files and file properties                                                                 
ansible.builtin.find                                    Return a list of files based on specific criteria                                                
ansible.builtin.gather_facts                            Gathers facts about remote hosts                                                                 
ansible.builtin.get_url                                 Downloads files from HTTP, HTTPS, or FTP to node                                                 
ansible.builtin.getent                                  A wrapper to the unix getent utility                                                             
ansible.builtin.git                                     Deploy software (or files) from git checkouts                                                    
ansible.builtin.group                                   Add or remove groups                                                                             
...skipping...
ansible.builtin.yum                                     Manages packages with the `yum' package manager                                                  
ansible.builtin.yum_repository                          Add or remove YUM repositories                                                                   
ansible.posix.acl                                       Set and retrieve file ACL information                                                            
ansible.posix.at                                        Schedule the execution of a command or script file via the at command                            
ansible.posix.authorized_key                            Adds or removes an SSH authorized key                                                            
ansible.posix.firewalld                                 Manage arbitrary ports/services with firewalld                                                   
ansible.posix.firewalld_info                            Gather information about firewalld                                                               
ansible.posix.mount                                     Control active and configured mount points                                                       
ansible.posix.patch                                     Apply patch files using the GNU patch tool                                                       
ansible.posix.rhel_facts                                Facts module to set or override RHEL specific facts                                              
ansible.posix.rhel_rpm_ostree                           Ensure packages exist in a RHEL for Edge rpm-ostree based system                                 
ansible.posix.rpm_ostree_upgrade                        Manage rpm-ostree upgrade transactions                                                           
ansible.posix.seboolean                                 Toggles SELinux booleans                                                                         
ansible.posix.selinux                                   Change policy and state of SELinux                                                               
ansible.posix.synchronize                               A wrapper around rsync to make common tasks in your playbooks quick and easy                     
ansible.posix.sysctl                                    Manage entries in sysctl.conf                                                                    
ansible.windows.async_status                            Obtain status of asynchronous task                                                               
ansible.windows.setup                                   Gathers facts about remote hosts                                                                 
ansible.windows.slurp                                   Slurps a file from remote nodes                                                                  
ansible.windows.win_acl                                 Set file/directory/registry permissions for a system user or group                               
ansible.windows.win_acl_inheritance                     Change ACL inheritance                                                                           
ansible.windows.win_certificate_store                   Manages the certificate store                                                                    
ansible.windows.win_command                             Executes a command on a remote Windows node                                                      
ansible.windows.win_copy                                Copies files to remote locations on windows hosts                                                
ansible.windows.win_dns_client                          Configures DNS lookup on Windows hosts                                                           
ansible.windows.win_domain                              Ensures the existence of a Windows domain                                                        
ansible.windows.win_domain_controller                   Manage domain controller/member server state for a Windows host                                  
[student@master ansible_examples]$ ansible-navigator doc ansible.builtin.yum -m stdout
> ANSIBLE.BUILTIN.YUM    (/usr/local/lib/python3.11/site-packages/ansible/modules/yum.py)

        Installs, upgrade, downgrades, removes, and lists packages and groups with the `yum' package manager. This module only
        works on Python 2. If you require Python 3 support see the [ansible.builtin.dnf] module.

ADDED IN: historical

  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- allow_downgrade
        Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that
        package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could
        end up with a set of packages that does not match the complete list of specified packages to install (because
        dependencies between the downgraded package and others can cause changes to the packages which were in the earlier
        transaction).
        default: 'no'
        type: bool
        added in: version 2.4 of ansible-core


- autoremove
        If `true', removes all "leaf" packages from the system that were originally installed as dependencies of user-
        installed packages but which are no longer required by any such package. Should be used alone or when state is
        `absent'
        NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)
...skipping...
EXAMPLES:

- name: Install the latest version of Apache
  ansible.builtin.yum:
    name: httpd
    state: latest

- name: Install Apache >= 2.4
  ansible.builtin.yum:
    name: httpd>=2.4
    state: present

- name: Install a list of packages (suitable replacement for 2.11 loop deprecation warning)
  ansible.builtin.yum:
    name:
      - nginx
      - postgresql
      - postgresql-server
    state: present

- name: Install a list of packages with a list variable
  ansible.builtin.yum:
    name: "{{ packages }}"
  vars:
    packages:
    - httpd
    - httpd-tools
[student@master ansible_examples]$ 

