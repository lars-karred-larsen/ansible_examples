<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.44.0 (0)
 --><!-- Pages: 1 --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1553pt" height="98pt" viewBox="0.00 0.00 1552.56 98.00" id="svg">
<script type="text/javascript" href="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js" id="jquery"/><script type="text/javascript" id="my_javascript"><![CDATA[/**
 * This file contains the functions responsible to highlight the plays, roles and tasks when rendering the SVG file in a browser
 * or any SVG reader that support Javascript.
 */

/**
 * The name of the CSS class for highlighted elements
 * @type {string}
 */
const HIGHLIGHT_CLASS = "highlight";

/**
 * The current selected element on the graph
 * @type {null}
 */
let currentSelectedElement = null;

/**
 * Highlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 */
function highlightLinkedNodes(parentElement, visitedElements = []) {
    $(parentElement).find('link').each(function (index, element) {
        const linkedElementId = $(element).attr('target');
        const edgeId = $(element).attr('edge');

        const currentElement = $(`#${linkedElementId}`);
        currentElement.addClass(HIGHLIGHT_CLASS);

        // Highlight the edge point to the target
        $(`#${edgeId}`).addClass(HIGHLIGHT_CLASS);

        if (!visitedElements.includes(linkedElementId)) {
            visitedElements.push(linkedElementId);
            // Recursively highlight
            highlightLinkedNodes(currentElement, visitedElements);
        }
    })
}


/**
 * Unhighlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 * @param {boolean} isHover True when we are coming from a mouseleave event. In that case, we should not unhighlight if
 * the parentElement is the current selected element
 */
function unHighlightLinkedNodes(parentElement, visitedElements = [], isHover) {
    const currentSelectedElementId = $(currentSelectedElement).attr('id');
    // Do not unhighlight the current selected element
    if ($(parentElement).attr('id') !== currentSelectedElementId || !isHover) {

        $(parentElement).find('link').each(function (index, element) {
            const linkedElementId = $(element).attr('target');
            const edgeId = $(element).attr('edge');

            const linkedElement = $(`#${linkedElementId}`);

            if (linkedElement.attr('id') !== currentSelectedElementId) {
                linkedElement.removeClass(HIGHLIGHT_CLASS);

                // Unhighlight the edge point to the target
                $(`#${edgeId}`).removeClass(HIGHLIGHT_CLASS);

                if (!visitedElements.includes(linkedElementId)) {
                    visitedElements.push(linkedElementId);
                    // Recursively unhighlight
                    unHighlightLinkedNodes(linkedElement, visitedElements, isHover);
                }
            }

        })
    }

}

/**
 * Hover handler for mouseenter event
 * @param {Event} event
 */
function hoverMouseEnter(event) {
    highlightLinkedNodes(event.currentTarget, []);
}

/**
 * Hover handler for mouseleave event
 * @param {Event} event
 */
function hoverMouseLeave(event) {
    unHighlightLinkedNodes(event.currentTarget, [], true);
}

/**
 * Handler when clicking on some elements
 * @param {Event} event
 */
function clickOnElement(event) {
    const newClickedElement = $(event.currentTarget);

    event.preventDefault(); // Disable the default click behavior since we override it here

    if (newClickedElement.attr('id') === $(currentSelectedElement).attr('id')) { // clicking again on the same element
        newClickedElement.removeClass(HIGHLIGHT_CLASS);
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        currentSelectedElement = null;
    } else { // clicking on a different node

        // Remove highlight from all the nodes linked to the current selected node
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        if (currentSelectedElement) {
            currentSelectedElement.removeClass(HIGHLIGHT_CLASS);
        }

        newClickedElement.addClass(HIGHLIGHT_CLASS);
        highlightLinkedNodes(newClickedElement, []);
        currentSelectedElement = newClickedElement;
    }
}

/**
 * Handler when double clicking on some elements
 * @param {Event} event
 */
function dblClickElement(event) {
    const newElementDlbClicked = event.currentTarget;
    const links = $(newElementDlbClicked).find("a[xlink\\:href]");

    if (links.length > 0) {
        document.location = $(links[0]).attr("xlink:href");
    } else {
        console.log("No links found on this element");
    }
}


$("#svg").ready(function () {
    let playbooks = $("g[id^=playbook_]");
    let plays = $("g[id^=play_]");
    let roles = $("g[id^=role_]");
    let blocks = $("g[id^=block_]");
    let tasks = $("g[id^=pre_task_], g[id^=task_], g[id^=post_task_]");

    playbooks.hover(hoverMouseEnter, hoverMouseLeave);
    playbooks.click(clickOnElement);
    playbooks.dblclick(dblClickElement);

    // Set hover and click events on the plays
    plays.hover(hoverMouseEnter, hoverMouseLeave);
    plays.click(clickOnElement);
    plays.dblclick(dblClickElement);

    // Set hover and click events on the roles
    roles.hover(hoverMouseEnter, hoverMouseLeave);
    roles.click(clickOnElement);
    roles.dblclick(dblClickElement);

    // Set hover and click events on the blocks
    blocks.hover(hoverMouseEnter, hoverMouseLeave);
    blocks.click(clickOnElement);
    blocks.dblclick(dblClickElement);

    // Set hover and click events on the tasks
    tasks.hover(hoverMouseEnter, hoverMouseLeave);
    tasks.click(clickOnElement);
    tasks.dblclick(dblClickElement);

});
]]></script><style type="text/css" id="my_css"><![CDATA[/**
 Hover on nodes, edges, path and polygon
 */
.node:hover, .edge:hover, path:hover, path + polygon:hover {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}

/**
 Manually added class by the script highlight-hover.js when hovering on plays and roles
 */
.highlight {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}
]]></style><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-94 1548.56,-94 1548.56,4 -4,4"/>
<!-- playbook_1fae8386 -->
<g id="playbook_1fae8386" class="node">
<title>playbook_1fae8386</title>
<g id="a_playbook_1fae8386"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook2.yaml" xlink:title="playbook2.yaml">
<ellipse fill="none" stroke="black" stroke-dasharray="1,5" cx="82.54" cy="-45" rx="82.59" ry="18"/>
<text text-anchor="middle" x="82.54" y="-41.3" font-family="Times-Roman" font-size="14.00">playbook2.yaml</text>
</a>
</g>
<links><link target="play_a7a754c5" edge="edge_1_playbook_1fae8386_play_a7a754c5"/></links></g>
<!-- play_a7a754c5 -->
<g id="play_a7a754c5" class="node">
<title>play_a7a754c5</title>
<g id="a_play_a7a754c5"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook2.yaml" xlink:title="node1,node2">
<polygon fill="#bb11b5" stroke="#bb11b5" points="904.09,-63 551.09,-63 551.09,-27 904.09,-27 904.09,-63"/>
<text text-anchor="middle" x="727.59" y="-41.3" font-family="Times-Roman" font-size="14.00" fill="#ffffff">Play: check registered variable for emptiness (2)</text>
</a>
</g>
<links><link target="task_e18f50be" edge="edge_1_play_a7a754c5_task_e18f50be"/><link target="task_aa791bcb" edge="edge_2_play_a7a754c5_task_aa791bcb"/></links></g>
<!-- playbook_1fae8386&#45;&gt;play_a7a754c5 -->
<g id="edge_playbook_1fae8386_play_a7a754c5" class="edge">
<title>playbook_1fae8386-&gt;play_a7a754c5</title>
<g id="a_edge_playbook_1fae8386_play_a7a754c5"><a xlink:title="1 Play: check registered variable for emptiness (2)">
<path fill="none" stroke="#bb11b5" d="M165.31,-45C259.34,-45 416.71,-45 540.93,-45" id="path_edge_playbook_1fae8386_play_a7a754c5"/>
<polygon fill="#bb11b5" stroke="#bb11b5" points="540.94,-48.5 550.94,-45 540.94,-41.5 540.94,-48.5"/>
</a>
</g>
<g id="a_edge_playbook_1fae8386_play_a7a754c5-label"><a xlink:title="1 Play: check registered variable for emptiness (2)">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#bb11b5" dy="-0.2%"><textPath xlink:href="#path_edge_playbook_1fae8386_play_a7a754c5" startOffset="234.47119999999995">1 Play: check registered variable for emptiness (2)</textPath></text>
</a>
</g>
</g>
<!-- task_e18f50be -->
<g id="task_e18f50be" class="node">
<title>task_e18f50be</title>
<g id="a_task_e18f50be"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook2.yaml" xlink:title="List contents of directory">
<polygon fill="none" stroke="#bb11b5" points="1519.15,-64.54 1519.15,-79.46 1423.18,-90 1287.47,-90 1191.5,-79.46 1191.5,-64.54 1287.47,-54 1423.18,-54 1519.15,-64.54"/>
<text text-anchor="middle" x="1355.32" y="-68.3" font-family="Times-Roman" font-size="14.00">[task] List contents of directory</text>
</a>
</g>
</g>
<!-- play_a7a754c5&#45;&gt;task_e18f50be -->
<g id="edge_1_play_a7a754c5_task_e18f50be" class="edge">
<title>play_a7a754c5-&gt;task_e18f50be</title>
<g id="a_edge_1_play_a7a754c5_task_e18f50be"><a xlink:title="1 ">
<path fill="none" stroke="#bb11b5" d="M904.14,-52.57C990.73,-56.31 1094.82,-60.8 1181.1,-64.53" id="path_edge_1_play_a7a754c5_task_e18f50be"/>
<polygon fill="#bb11b5" stroke="#bb11b5" points="1181.12,-68.03 1191.26,-64.96 1181.42,-61.04 1181.12,-68.03"/>
</a>
</g>
<g id="a_edge_1_play_a7a754c5_task_e18f50be-label"><a xlink:title="1 ">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#bb11b5" dy="-0.2%"><textPath xlink:href="#path_edge_1_play_a7a754c5_task_e18f50be" startOffset="208.68576731201168">1 </textPath></text>
</a>
</g>
</g>
<!-- task_aa791bcb -->
<g id="task_aa791bcb" class="node">
<title>task_aa791bcb</title>
<g id="a_task_aa791bcb"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook2.yaml" xlink:title="Check contents for emptiness">
<polygon fill="none" stroke="#bb11b5" points="1544.8,-10.54 1544.8,-25.46 1433.81,-36 1276.84,-36 1165.85,-25.46 1165.85,-10.54 1276.84,0 1433.81,0 1544.8,-10.54"/>
<text text-anchor="middle" x="1355.32" y="-14.3" font-family="Times-Roman" font-size="14.00">[task] Check contents for emptiness</text>
</a>
</g>
</g>
<!-- play_a7a754c5&#45;&gt;task_aa791bcb -->
<g id="edge_2_play_a7a754c5_task_aa791bcb" class="edge">
<title>play_a7a754c5-&gt;task_aa791bcb</title>
<g id="a_edge_2_play_a7a754c5_task_aa791bcb"><a xlink:title="2 [when: contents.stdout == &quot;&quot;]">
<path fill="none" stroke="#bb11b5" d="M904.18,-34.87C910.22,-34.57 916.2,-34.28 922.09,-34 998.38,-30.42 1082.29,-27.16 1155.71,-24.53" id="path_edge_2_play_a7a754c5_task_aa791bcb"/>
<polygon fill="#bb11b5" stroke="#bb11b5" points="1156.13,-28.02 1166,-24.16 1155.88,-21.02 1156.13,-28.02"/>
</a>
</g>
<g id="a_edge_2_play_a7a754c5_task_aa791bcb-label"><a xlink:title="2 [when: contents.stdout == &quot;&quot;]">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#bb11b5" dy="-0.2%"><textPath xlink:href="#path_edge_2_play_a7a754c5_task_aa791bcb" startOffset="160.32553676368556">2 [when: contents.stdout == ""]</textPath></text>
</a>
</g>
</g>
</g>
</svg>