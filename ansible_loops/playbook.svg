<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.44.0 (0)
 --><!-- Pages: 1 --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1453pt" height="98pt" viewBox="0.00 0.00 1453.04 98.00" id="svg">
<script type="text/javascript" href="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js" id="jquery"/><script type="text/javascript" id="my_javascript"><![CDATA[/**
 * This file contains the functions responsible to highlight the plays, roles and tasks when rendering the SVG file in a browser
 * or any SVG reader that support Javascript.
 */

/**
 * The name of the CSS class for highlighted elements
 * @type {string}
 */
const HIGHLIGHT_CLASS = "highlight";

/**
 * The current selected element on the graph
 * @type {null}
 */
let currentSelectedElement = null;

/**
 * Highlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 */
function highlightLinkedNodes(parentElement, visitedElements = []) {
    $(parentElement).find('link').each(function (index, element) {
        const linkedElementId = $(element).attr('target');
        const edgeId = $(element).attr('edge');

        const currentElement = $(`#${linkedElementId}`);
        currentElement.addClass(HIGHLIGHT_CLASS);

        // Highlight the edge point to the target
        $(`#${edgeId}`).addClass(HIGHLIGHT_CLASS);

        if (!visitedElements.includes(linkedElementId)) {
            visitedElements.push(linkedElementId);
            // Recursively highlight
            highlightLinkedNodes(currentElement, visitedElements);
        }
    })
}


/**
 * Unhighlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 * @param {boolean} isHover True when we are coming from a mouseleave event. In that case, we should not unhighlight if
 * the parentElement is the current selected element
 */
function unHighlightLinkedNodes(parentElement, visitedElements = [], isHover) {
    const currentSelectedElementId = $(currentSelectedElement).attr('id');
    // Do not unhighlight the current selected element
    if ($(parentElement).attr('id') !== currentSelectedElementId || !isHover) {

        $(parentElement).find('link').each(function (index, element) {
            const linkedElementId = $(element).attr('target');
            const edgeId = $(element).attr('edge');

            const linkedElement = $(`#${linkedElementId}`);

            if (linkedElement.attr('id') !== currentSelectedElementId) {
                linkedElement.removeClass(HIGHLIGHT_CLASS);

                // Unhighlight the edge point to the target
                $(`#${edgeId}`).removeClass(HIGHLIGHT_CLASS);

                if (!visitedElements.includes(linkedElementId)) {
                    visitedElements.push(linkedElementId);
                    // Recursively unhighlight
                    unHighlightLinkedNodes(linkedElement, visitedElements, isHover);
                }
            }

        })
    }

}

/**
 * Hover handler for mouseenter event
 * @param {Event} event
 */
function hoverMouseEnter(event) {
    highlightLinkedNodes(event.currentTarget, []);
}

/**
 * Hover handler for mouseleave event
 * @param {Event} event
 */
function hoverMouseLeave(event) {
    unHighlightLinkedNodes(event.currentTarget, [], true);
}

/**
 * Handler when clicking on some elements
 * @param {Event} event
 */
function clickOnElement(event) {
    const newClickedElement = $(event.currentTarget);

    event.preventDefault(); // Disable the default click behavior since we override it here

    if (newClickedElement.attr('id') === $(currentSelectedElement).attr('id')) { // clicking again on the same element
        newClickedElement.removeClass(HIGHLIGHT_CLASS);
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        currentSelectedElement = null;
    } else { // clicking on a different node

        // Remove highlight from all the nodes linked to the current selected node
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        if (currentSelectedElement) {
            currentSelectedElement.removeClass(HIGHLIGHT_CLASS);
        }

        newClickedElement.addClass(HIGHLIGHT_CLASS);
        highlightLinkedNodes(newClickedElement, []);
        currentSelectedElement = newClickedElement;
    }
}

/**
 * Handler when double clicking on some elements
 * @param {Event} event
 */
function dblClickElement(event) {
    const newElementDlbClicked = event.currentTarget;
    const links = $(newElementDlbClicked).find("a[xlink\\:href]");

    if (links.length > 0) {
        document.location = $(links[0]).attr("xlink:href");
    } else {
        console.log("No links found on this element");
    }
}


$("#svg").ready(function () {
    let playbooks = $("g[id^=playbook_]");
    let plays = $("g[id^=play_]");
    let roles = $("g[id^=role_]");
    let blocks = $("g[id^=block_]");
    let tasks = $("g[id^=pre_task_], g[id^=task_], g[id^=post_task_]");

    playbooks.hover(hoverMouseEnter, hoverMouseLeave);
    playbooks.click(clickOnElement);
    playbooks.dblclick(dblClickElement);

    // Set hover and click events on the plays
    plays.hover(hoverMouseEnter, hoverMouseLeave);
    plays.click(clickOnElement);
    plays.dblclick(dblClickElement);

    // Set hover and click events on the roles
    roles.hover(hoverMouseEnter, hoverMouseLeave);
    roles.click(clickOnElement);
    roles.dblclick(dblClickElement);

    // Set hover and click events on the blocks
    blocks.hover(hoverMouseEnter, hoverMouseLeave);
    blocks.click(clickOnElement);
    blocks.dblclick(dblClickElement);

    // Set hover and click events on the tasks
    tasks.hover(hoverMouseEnter, hoverMouseLeave);
    tasks.click(clickOnElement);
    tasks.dblclick(dblClickElement);

});
]]></script><style type="text/css" id="my_css"><![CDATA[/**
 Hover on nodes, edges, path and polygon
 */
.node:hover, .edge:hover, path:hover, path + polygon:hover {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}

/**
 Manually added class by the script highlight-hover.js when hovering on plays and roles
 */
.highlight {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}
]]></style><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-94 1449.04,-94 1449.04,4 -4,4"/>
<!-- playbook_44651d25 -->
<g id="playbook_44651d25" class="node">
<title>playbook_44651d25</title>
<g id="a_playbook_44651d25"><a xlink:href="/home/student/ansible_examples/ansible_loops/playbook.yaml" xlink:title="playbook.yaml">
<ellipse fill="none" stroke="black" stroke-dasharray="1,5" cx="76.69" cy="-45" rx="76.89" ry="18"/>
<text text-anchor="middle" x="76.69" y="-41.3" font-family="Times-Roman" font-size="14.00">playbook.yaml</text>
</a>
</g>
<links><link target="play_cea8a16f" edge="edge_1_playbook_44651d25_play_cea8a16f"/></links></g>
<!-- play_cea8a16f -->
<g id="play_cea8a16f" class="node">
<title>play_cea8a16f</title>
<g id="a_play_cea8a16f"><a xlink:href="/home/student/ansible_examples/ansible_loops/playbook.yaml" xlink:title="node1,node2">
<polygon fill="#27a544" stroke="#27a544" points="1102.39,-63 644.39,-63 644.39,-27 1102.39,-27 1102.39,-63"/>
<text text-anchor="middle" x="873.39" y="-41.3" font-family="Times-Roman" font-size="14.00" fill="#ffffff">Play: Create multiple user accounts and add them to groups (2)</text>
</a>
</g>
<links><link target="task_318ea25c" edge="edge_1_play_cea8a16f_task_318ea25c"/><link target="task_01cb74db" edge="edge_2_play_cea8a16f_task_01cb74db"/></links></g>
<!-- playbook_44651d25&#45;&gt;play_cea8a16f -->
<g id="edge_playbook_44651d25_play_cea8a16f" class="edge">
<title>playbook_44651d25-&gt;play_cea8a16f</title>
<g id="a_edge_playbook_44651d25_play_cea8a16f"><a xlink:title="1 Play: Create multiple user accounts and add them to groups (2)">
<path fill="none" stroke="#27a544" d="M153.53,-45C262.97,-45 470.04,-45 633.92,-45" id="path_edge_playbook_44651d25_play_cea8a16f"/>
<polygon fill="#27a544" stroke="#27a544" points="634.16,-48.5 644.16,-45 634.16,-41.5 634.16,-48.5"/>
</a>
</g>
<g id="a_edge_playbook_44651d25_play_cea8a16f-label"><a xlink:title="1 Play: Create multiple user accounts and add them to groups (2)">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#27a544" dy="-0.2%"><textPath xlink:href="#path_edge_playbook_44651d25_play_cea8a16f" startOffset="301.0964">1 Play: Create multiple user accounts and add them to groups (2)</textPath></text>
</a>
</g>
</g>
<!-- task_318ea25c -->
<g id="task_318ea25c" class="node">
<title>task_318ea25c</title>
<g id="a_task_318ea25c"><a xlink:href="/home/student/ansible_examples/ansible_loops/playbook.yaml" xlink:title="Create group">
<polygon fill="none" stroke="#27a544" points="1405.17,-64.54 1405.17,-79.46 1342.81,-90 1254.62,-90 1192.26,-79.46 1192.26,-64.54 1254.62,-54 1342.81,-54 1405.17,-64.54"/>
<text text-anchor="middle" x="1298.71" y="-68.3" font-family="Times-Roman" font-size="14.00">[task] Create group</text>
</a>
</g>
</g>
<!-- play_cea8a16f&#45;&gt;task_318ea25c -->
<g id="edge_1_play_cea8a16f_task_318ea25c" class="edge">
<title>play_cea8a16f-&gt;task_318ea25c</title>
<g id="a_edge_1_play_cea8a16f_task_318ea25c"><a xlink:title="1 ">
<path fill="none" stroke="#27a544" d="M1102.47,-59.55C1130.04,-61.31 1157.24,-63.04 1182.18,-64.63" id="path_edge_1_play_cea8a16f_task_318ea25c"/>
<polygon fill="#27a544" stroke="#27a544" points="1182.16,-68.14 1192.36,-65.28 1182.6,-61.15 1182.16,-68.14"/>
</a>
</g>
<g id="a_edge_1_play_cea8a16f_task_318ea25c-label"><a xlink:title="1 ">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#27a544" dy="-0.2%"><textPath xlink:href="#path_edge_1_play_cea8a16f_task_318ea25c" startOffset="58.70250174648602">1 </textPath></text>
</a>
</g>
</g>
<!-- task_01cb74db -->
<g id="task_01cb74db" class="node">
<title>task_01cb74db</title>
<g id="a_task_01cb74db"><a xlink:href="/home/student/ansible_examples/ansible_loops/playbook.yaml" xlink:title="Create user accounts">
<polygon fill="none" stroke="#27a544" points="1444.87,-10.54 1444.87,-25.46 1359.25,-36 1238.17,-36 1152.56,-25.46 1152.56,-10.54 1238.17,0 1359.25,0 1444.87,-10.54"/>
<text text-anchor="middle" x="1298.71" y="-14.3" font-family="Times-Roman" font-size="14.00">[task] Create user accounts</text>
</a>
</g>
</g>
<!-- play_cea8a16f&#45;&gt;task_01cb74db -->
<g id="edge_2_play_cea8a16f_task_01cb74db" class="edge">
<title>play_cea8a16f-&gt;task_01cb74db</title>
<g id="a_edge_2_play_cea8a16f_task_01cb74db"><a xlink:title="2 ">
<path fill="none" stroke="#27a544" d="M1102.47,-30.45C1119.14,-29.39 1135.68,-28.33 1151.67,-27.31" id="path_edge_2_play_cea8a16f_task_01cb74db"/>
<polygon fill="#27a544" stroke="#27a544" points="1152.33,-30.78 1162.09,-26.65 1151.89,-23.79 1152.33,-30.78"/>
</a>
</g>
<g id="a_edge_2_play_cea8a16f_task_01cb74db-label"><a xlink:title="2 ">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#27a544" dy="-0.2%"><textPath xlink:href="#path_edge_2_play_cea8a16f_task_01cb74db" startOffset="35.46807412788735">2 </textPath></text>
</a>
</g>
</g>
</g>
</svg>